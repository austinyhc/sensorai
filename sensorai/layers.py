# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/02_layers.ipynb (unless otherwise specified).

__all__ = ['AdaptiveConcatPool1d', 'AdaptiveConcatPool2d', 'PoolType', 'adaptive_pool']

# Cell
from .imports import *
from .tf_imports import *

# Cell
class AdaptiveConcatPool1d(keras.layers.Layer):
    def __init__(self, size=None):
        super(AdaptiveConcatPool1d,self).__init__()
        self.size = size or 1
        self.ap = tfa.layers.AdaptiveAveragePooling1D(self.size)
        self.mp = tfa.layers.AdaptiveMaxPooling1D(self.size)

    def call(self, x):
        return tf.concat([self.mp(x), self.ap(x)], -1)

# Cell
class AdaptiveConcatPool2d(keras.layers.Layer):
    def __init__(self, size=None):
        super(AdaptiveConcatPool2d,self).__init__()
        self.size = size or 1
        self.ap = tfa.layers.AdaptiveAveragePooling2D(self.size)
        self.mp = tfa.layers.AdaptiveMaxPooling2D(self.size)

    def call(self, x):
        return tf.concat([self.mp(x), self.ap(x)], -1)

# Cell
class PoolType: Avg,Max,Cat = 'Avg','Max','Cat'

# Cell
def adaptive_pool(pool_type):
    return (tfa.layers.AdaptiveAveragePooling2D if pool_type=='Avg' else
            tfa.layers.AdaptiveMaxPooling2D     if pool_type=='Max' else
            AdaptiveConcatPool2d)